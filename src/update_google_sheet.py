import pandas as pd
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from pathlib import Path
import os
from dotenv import load_dotenv

# ====== C·∫•u h√¨nh ======
SHEET_ID = os.environ.get("GOOGLE_SHEET_ID")
WORKSHEET_NAME = os.environ.get("GOOGLE_SHEET_WORKSHEET")
CREDENTIALS_FILE = os.environ.get("GOOGLE_CREDENTIALS_FILE")

# Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng
if not SHEET_ID:
    raise ValueError("Ch∆∞a c·∫•u h√¨nh bi·∫øn m√¥i tr∆∞·ªùng GOOGLE_SHEET_ID")
if not CREDENTIALS_FILE:
    raise ValueError("Ch∆∞a c·∫•u h√¨nh bi·∫øn m√¥i tr∆∞·ªùng GOOGLE_CREDENTIALS_FILE")

# ====== Thi·∫øt l·∫≠p ƒë∆∞·ªùng d·∫´n ======
BASE_DIR = Path(__file__).resolve().parent.parent
qa_log_path = BASE_DIR / "logs" / "qa_log.csv"

# ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n ch√≠nh x√°c
print(f"ƒêang s·ª≠ d·ª•ng ƒë∆∞·ªùng d·∫´n: {qa_log_path}")
if not os.path.exists(qa_log_path):
    raise FileNotFoundError(f"File kh√¥ng t·ªìn t·∫°i: {qa_log_path}")

creds_path = BASE_DIR / CREDENTIALS_FILE
if not os.path.exists(creds_path):
    raise FileNotFoundError(f"File credentials kh√¥ng t·ªìn t·∫°i: {creds_path}")

# ====== K·∫øt n·ªëi Google Sheets ======
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(str(creds_path), scope)
client = gspread.authorize(creds)

# ====== M·ªü Google Sheet ======
sh = client.open_by_key(SHEET_ID)
sheet = sh.worksheet(WORKSHEET_NAME)

# ====== ƒê·ªçc d·ªØ li·ªáu log ======
try:
    df_local = pd.read_csv(qa_log_path)
    print(f"ƒê√£ ƒë·ªçc th√†nh c√¥ng file log v·ªõi {len(df_local)} d√≤ng")
except Exception as e:
    print(f"L·ªói khi ƒë·ªçc file CSV: {str(e)}")
    raise

# ====== L√†m s·∫°ch NaN v√† Inf ƒë·ªÉ tr√°nh l·ªói JSON ======
df_local = df_local.replace([float('inf'), float('-inf')], '')
df_local = df_local.fillna('')

# ====== L·∫•y d·ªØ li·ªáu hi·ªán t·∫°i t·ª´ Google Sheet ======
sheet_data = sheet.get_all_values()
original_headers = sheet_data[0] if sheet_data else []

existing_rows = len(sheet_data)
print(f"Sheet hi·ªán t·∫°i c√≥ {existing_rows} d√≤ng")

# H√†m chu·∫©n h√≥a t√™n c·ªôt
normalize_col = lambda x: x.strip().replace(' ', '_').replace('\u00a0', '').replace('\xa0', '').replace('\t', '').replace('\n', '').replace('\r', '').replace('__', '_')

if existing_rows <= 1:  # Ch·ªâ c√≥ header ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu
    # ====== X√≥a t·∫•t c·∫£ d·ªØ li·ªáu c≈© v√† t·∫£i l·∫°i ======
    print("Sheet tr·ªëng, ƒëang t·∫£i to√†n b·ªô d·ªØ li·ªáu l√™n...")
    if existing_rows > 0:  # C√≥ header, gi·ªØ l·∫°i
        sheet.update(values=df_local.values.tolist(), range_name='A2:Z')
    else:  # Kh√¥ng c√≥ header, th√™m c·∫£ header
        all_data = [df_local.columns.tolist()] + df_local.values.tolist()
        sheet.update(values=all_data, range_name='A1:Z')
    print(f"‚úÖ ƒê√£ t·∫£i {len(df_local)} d√≤ng l√™n Google Sheet.")
else:
    # ====== ƒê·ªçc d·ªØ li·ªáu t·ª´ Google Sheet th√†nh DataFrame ======
    try:
        # Chu·∫©n h√≥a t√™n c·ªôt c·ªßa sheet v·ªÅ ƒë√∫ng chu·∫©n
        norm_headers = [normalize_col(h) for h in original_headers]
        df_sheet = pd.DataFrame(sheet_data[1:], columns=norm_headers)
        # Chu·∫©n h√≥a t√™n c·ªôt c·ªßa local
        df_local.columns = [normalize_col(c) for c in df_local.columns]

        # T√¨m c√°c c·ªôt ID ƒë·ªÉ so s√°nh
        id_columns = ['Conversation_ID', 'User_ID', 'Question', 'Answer']
        rating_col = 'Rating'
        feedback_col = 'Feedback'

        # Ki·ªÉm tra ƒë·ªß c·ªôt ID
        for col in id_columns:
            if col not in df_sheet.columns:
                print(f"‚ùå Sheet thi·∫øu c·ªôt {col}, kh√¥ng th·ªÉ ƒë·ªìng b·ªô!")
                raise Exception(f"Sheet thi·∫øu c·ªôt {col}")
            if col not in df_local.columns:
                print(f"‚ùå File log thi·∫øu c·ªôt {col}, kh√¥ng th·ªÉ ƒë·ªìng b·ªô!")
                raise Exception(f"File log thi·∫øu c·ªôt {col}")

        # Chu·∫©n h√≥a d·ªØ li·ªáu v·ªÅ string ƒë·ªÉ so s√°nh
        for col in id_columns + [rating_col, feedback_col]:
            if col in df_local.columns:
                df_local[col] = df_local[col].astype(str).fillna("").str.strip()
            if col in df_sheet.columns:
                df_sheet[col] = df_sheet[col].astype(str).fillna("").str.strip()

        # T·∫°o index nhanh cho sheet theo tuple ID
        sheet_index = {}
        for idx, row in df_sheet.iterrows():
            try:
                key = tuple(row[col] for col in id_columns)
                sheet_index[key] = (idx, row)
            except Exception as e:
                print(f"‚ö†Ô∏è B·ªè qua d√≤ng sheet l·ªói key: {e}")
                continue

        rows_to_update = []
        new_rows = []
        for _, local_row in df_local.iterrows():
            try:
                key = tuple(local_row[col] for col in id_columns)
            except Exception as e:
                print(f"‚ö†Ô∏è B·ªè qua d√≤ng local l·ªói key: {e}")
                continue
            if key in sheet_index:
                sheet_idx, sheet_row = sheet_index[key]
                # So s√°nh to√†n b·ªô tr∆∞·ªùng
                is_same = True
                for col in norm_headers:
                    local_val = str(local_row.get(col, "")).strip()
                    sheet_val = str(sheet_row.get(col, "")).strip()
                    if local_val != sheet_val:
                        is_same = False
                        break
                if is_same:
                    continue  # B·ªè qua n·∫øu gi·ªëng h·ªát
                # N·∫øu ch·ªâ kh√°c Rating ho·∫∑c Feedback th√¨ update
                update_rating = (rating_col in df_local.columns and rating_col in df_sheet.columns and local_row[rating_col] != sheet_row[rating_col])
                update_feedback = (feedback_col in df_local.columns and feedback_col in df_sheet.columns and local_row[feedback_col] != sheet_row[feedback_col])
                if update_rating or update_feedback:
                    rows_to_update.append((sheet_idx + 2, local_row))  # +2 v√¨ header l√† d√≤ng 1
            else:
                new_rows.append(local_row.values.tolist())

        # C·∫≠p nh·∫≠t c√°c d√≤ng c·∫ßn s·ª≠a
        if rows_to_update:
            print(f"üîÑ ƒêang c·∫≠p nh·∫≠t {len(rows_to_update)} d√≤ng c√≥ thay ƒë·ªïi v·ªÅ Rating/Feedback...")
            for sheet_row_idx, local_row in rows_to_update:
                if rating_col in df_local.columns and rating_col in norm_headers:
                    rating_col_idx = norm_headers.index(rating_col) + 1
                    rating_value = local_row[rating_col]
                    print(f"C·∫≠p nh·∫≠t Rating ·ªü √¥ ({sheet_row_idx}, {rating_col_idx}) th√†nh '{rating_value}'")
                    sheet.update_cell(sheet_row_idx, rating_col_idx, rating_value)
                if feedback_col in df_local.columns and feedback_col in norm_headers:
                    feedback_col_idx = norm_headers.index(feedback_col) + 1
                    feedback_value = local_row[feedback_col]
                    print(f"C·∫≠p nh·∫≠t Feedback ·ªü √¥ ({sheet_row_idx}, {feedback_col_idx}) th√†nh '{feedback_value}'")
                    sheet.update_cell(sheet_row_idx, feedback_col_idx, feedback_value)
            print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t xong c√°c d√≤ng c√≥ thay ƒë·ªïi.")

        # Th√™m c√°c d√≤ng m·ªõi
        if new_rows:
            print(f"üü¢ ƒêang th√™m {len(new_rows)} d√≤ng m·ªõi v√†o Google Sheet...")
            sheet.append_rows(new_rows, value_input_option="USER_ENTERED")
            print("‚úÖ ƒê√£ th√™m c√°c d√≤ng m·ªõi th√†nh c√¥ng.")
        if not rows_to_update and not new_rows:
            print("‚ÑπÔ∏è Kh√¥ng c√≥ thay ƒë·ªïi n√†o c·∫ßn ƒë·ªìng b·ªô.")
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·ªìng b·ªô d·ªØ li·ªáu: {str(e)}")
        import traceback
        traceback.print_exc()
        raise
