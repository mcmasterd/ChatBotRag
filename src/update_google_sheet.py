import pandas as pd
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from pathlib import Path
import os
import numpy as np
from dotenv import load_dotenv

# ====== C·∫•u h√¨nh ======
SHEET_ID = os.environ.get("GOOGLE_SHEET_ID")
WORKSHEET_NAME = os.environ.get("GOOGLE_SHEET_WORKSHEET")
CREDENTIALS_FILE = os.environ.get("GOOGLE_CREDENTIALS_FILE")

# Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng
if not SHEET_ID:
    raise ValueError("Ch∆∞a c·∫•u h√¨nh bi·∫øn m√¥i tr∆∞·ªùng GOOGLE_SHEET_ID")
if not CREDENTIALS_FILE:
    raise ValueError("Ch∆∞a c·∫•u h√¨nh bi·∫øn m√¥i tr∆∞·ªùng GOOGLE_CREDENTIALS_FILE")

# ====== Thi·∫øt l·∫≠p ƒë∆∞·ªùng d·∫´n ======
BASE_DIR = Path(__file__).resolve().parent.parent
qa_log_path = BASE_DIR / "logs" / "qa_log.csv"

# ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n ch√≠nh x√°c
print(f"ƒêang s·ª≠ d·ª•ng ƒë∆∞·ªùng d·∫´n: {qa_log_path}")
if not os.path.exists(qa_log_path):
    raise FileNotFoundError(f"File kh√¥ng t·ªìn t·∫°i: {qa_log_path}")

creds_path = BASE_DIR / CREDENTIALS_FILE
if not os.path.exists(creds_path):
    raise FileNotFoundError(f"File credentials kh√¥ng t·ªìn t·∫°i: {creds_path}")

# ====== K·∫øt n·ªëi Google Sheets ======
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(str(creds_path), scope)
client = gspread.authorize(creds)

# ====== M·ªü Google Sheet ======
sh = client.open_by_key(SHEET_ID)
sheet = sh.worksheet(WORKSHEET_NAME)

# ====== ƒê·ªçc d·ªØ li·ªáu log ======
try:
    df_local = pd.read_csv(qa_log_path)
    print(f"ƒê√£ ƒë·ªçc th√†nh c√¥ng file log v·ªõi {len(df_local)} d√≤ng")
except Exception as e:
    print(f"L·ªói khi ƒë·ªçc file CSV: {str(e)}")
    raise

# ====== L√†m s·∫°ch NaN v√† Inf ƒë·ªÉ tr√°nh l·ªói JSON ======
df_local = df_local.replace([float('inf'), float('-inf')], '')
df_local = df_local.fillna('')

# ====== L·∫•y d·ªØ li·ªáu hi·ªán t·∫°i t·ª´ Google Sheet ======
sheet_data = sheet.get_all_values()
original_headers = sheet_data[0] if sheet_data else []

# Chu·∫©n h√≥a headers b·∫±ng c√°ch b·ªè kho·∫£ng tr·∫Øng v√† chuy·ªÉn sang lowercase ƒë·ªÉ so s√°nh d·ªÖ d√†ng h∆°n
headers = [h.strip().lower().replace(' ', '_') for h in original_headers] if original_headers else []
local_headers = [h.strip().lower().replace(' ', '_') for h in df_local.columns]

# In th√¥ng tin debug v·ªÅ headers
print(f"Headers trong CSV local: {list(df_local.columns)}")
print(f"Headers trong Google Sheet (g·ªëc): {original_headers}")
print(f"Headers trong Google Sheet (chu·∫©n h√≥a): {headers}")

# T·∫°o mapping gi·ªØa t√™n c·ªôt chu·∫©n h√≥a v√† t√™n c·ªôt g·ªëc trong Google Sheet
header_mapping = {headers[i]: original_headers[i] for i in range(len(headers))} if headers else {}

existing_rows = len(sheet_data)
print(f"Sheet hi·ªán t·∫°i c√≥ {existing_rows} d√≤ng")

if existing_rows <= 1:  # Ch·ªâ c√≥ header ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu
    # ====== X√≥a t·∫•t c·∫£ d·ªØ li·ªáu c≈© v√† t·∫£i l·∫°i ======
    print("Sheet tr·ªëng, ƒëang t·∫£i to√†n b·ªô d·ªØ li·ªáu l√™n...")
    if existing_rows > 0:  # C√≥ header, gi·ªØ l·∫°i
        # S·ª≠ d·ª•ng tham s·ªë c√≥ t√™n ƒë·ªÉ tr√°nh c·∫£nh b√°o
        sheet.update(values=df_local.values.tolist(), range_name='A2:Z')
    else:  # Kh√¥ng c√≥ header, th√™m c·∫£ header
        all_data = [df_local.columns.tolist()] + df_local.values.tolist()
        # S·ª≠ d·ª•ng tham s·ªë c√≥ t√™n ƒë·ªÉ tr√°nh c·∫£nh b√°o
        sheet.update(values=all_data, range_name='A1:Z')
    print(f"‚úÖ ƒê√£ t·∫£i {len(df_local)} d√≤ng l√™n Google Sheet.")
else:
    # ====== ƒê·ªçc d·ªØ li·ªáu t·ª´ Google Sheet th√†nh DataFrame ======
    try:
        df_sheet = pd.DataFrame(sheet_data[1:], columns=original_headers)
        
        # X√°c ƒë·ªãnh c√°c c·ªôt ID ƒë·ªÉ so s√°nh (Conversation_ID, User_ID, Question, Answer)
        id_columns_local = ['Conversation_ID', 'User_ID', 'Question', 'Answer']
        
        # T√¨m t√™n t∆∞∆°ng ·ª©ng c·ªßa c·ªôt trong sheet
        id_columns_sheet = []
        for col in id_columns_local:
            col_lower = col.strip().lower().replace(' ', '_')
            for sheet_col in original_headers:
                if sheet_col.strip().lower().replace(' ', '_') == col_lower:
                    id_columns_sheet.append(sheet_col)
                    break
        
        print(f"C√°c c·ªôt ID trong local: {id_columns_local}")
        print(f"C√°c c·ªôt ID trong sheet: {id_columns_sheet}")
        
        # T√¨m c·ªôt Rating v√† Feedback trong sheet
        rating_col = None
        feedback_col = None
        
        for col in original_headers:
            col_lower = col.strip().lower().replace(' ', '_')
            if col_lower == 'rating':
                rating_col = col
            elif col_lower == 'feedback':
                feedback_col = col
        
        print(f"C·ªôt Rating trong sheet: {rating_col}")
        print(f"C·ªôt Feedback trong sheet: {feedback_col}")
        
        # ƒê√°nh d·∫•u nh·ªØng d√≤ng c·∫ßn c·∫≠p nh·∫≠t (c√≥ trong sheet v√† trong file local)
        rows_to_update = []
        for i, local_row in df_local.iterrows():
            for j, sheet_row in df_sheet.iterrows():
                # So s√°nh c√°c c·ªôt ID
                match = True
                for local_col, sheet_col in zip(id_columns_local, id_columns_sheet):
                    if local_col not in local_row or sheet_col not in sheet_row:
                        match = False
                        break
                    
                    local_val = str(local_row[local_col]).strip()
                    sheet_val = str(sheet_row[sheet_col]).strip()
                    
                    if local_val != sheet_val:
                        match = False
                        break
                
                if match:
                    # So s√°nh c√°c tr∆∞·ªùng kh√°c (Rating, Feedback)
                    diff = False
                    
                    # L·∫•y gi√° tr·ªã Rating t·ª´ c·∫£ hai ngu·ªìn
                    local_rating = str(local_row['Rating']).strip() if 'Rating' in local_row else ""
                    sheet_rating = str(sheet_row[rating_col]).strip() if rating_col and rating_col in sheet_row else ""
                    
                    # L·∫•y gi√° tr·ªã Feedback t·ª´ c·∫£ hai ngu·ªìn
                    local_feedback = str(local_row['Feedback']).strip() if 'Feedback' in local_row else ""
                    sheet_feedback = str(sheet_row[feedback_col]).strip() if feedback_col and feedback_col in sheet_row else ""
                    
                    # So s√°nh
                    if local_rating != sheet_rating or local_feedback != sheet_feedback:
                        diff = True
                        print(f"Ph√°t hi·ªán s·ª± kh√°c bi·ªát gi·ªØa local v√† sheet cho d√≤ng {j+2}:")
                        print(f"  Rating: local='{local_rating}', sheet='{sheet_rating}'")
                        print(f"  Feedback: local='{local_feedback}', sheet='{sheet_feedback}'")
                    
                    if diff:
                        # C·∫≠p nh·∫≠t d√≤ng j+2 (header l√† 1, d·ªØ li·ªáu b·∫Øt ƒë·∫ßu t·ª´ 2)
                        sheet_row_idx = j + 2
                        rows_to_update.append((sheet_row_idx, local_row))
                    break
        
        # T√¨m c√°c d√≤ng m·ªõi (kh√¥ng c√≥ trong sheet)
        ids_in_sheet = set()
        conv_id_col = None
        for col in id_columns_sheet:
            if col.strip().lower().replace(' ', '_') == 'conversation_id':
                conv_id_col = col
                break
                
        if conv_id_col and conv_id_col in df_sheet.columns:
            ids_in_sheet = set(df_sheet[conv_id_col].astype(str))
        
        new_rows = df_local[~df_local['Conversation_ID'].astype(str).isin(ids_in_sheet)]
        
        # C·∫≠p nh·∫≠t c√°c d√≤ng c·∫ßn s·ª≠a
        if rows_to_update:
            print(f"üîÑ ƒêang c·∫≠p nh·∫≠t {len(rows_to_update)} d√≤ng c√≥ thay ƒë·ªïi...")
            for sheet_row_idx, local_row in rows_to_update:
                # C·∫≠p nh·∫≠t Rating n·∫øu c·ªôt t·ªìn t·∫°i
                if rating_col:
                    rating_col_idx = original_headers.index(rating_col) + 1
                    rating_value = local_row['Rating'] if 'Rating' in local_row else ""
                    print(f"C·∫≠p nh·∫≠t Rating ·ªü √¥ ({sheet_row_idx}, {rating_col_idx}) th√†nh '{rating_value}'")
                    sheet.update_cell(sheet_row_idx, rating_col_idx, rating_value)
                
                # C·∫≠p nh·∫≠t Feedback n·∫øu c·ªôt t·ªìn t·∫°i
                if feedback_col:
                    feedback_col_idx = original_headers.index(feedback_col) + 1
                    feedback_value = local_row['Feedback'] if 'Feedback' in local_row else ""
                    print(f"C·∫≠p nh·∫≠t Feedback ·ªü √¥ ({sheet_row_idx}, {feedback_col_idx}) th√†nh '{feedback_value}'")
                    sheet.update_cell(sheet_row_idx, feedback_col_idx, feedback_value)
                
            print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t xong c√°c d√≤ng c√≥ thay ƒë·ªïi.")
        
        # Th√™m c√°c d√≤ng m·ªõi
        if not new_rows.empty:
            print(f"üü¢ ƒêang th√™m {len(new_rows)} d√≤ng m·ªõi v√†o Google Sheet...")
            new_rows_list = new_rows.values.tolist()
            sheet.append_rows(new_rows_list, value_input_option="USER_ENTERED")
            print("‚úÖ ƒê√£ th√™m c√°c d√≤ng m·ªõi th√†nh c√¥ng.")
        
        if not rows_to_update and new_rows.empty:
            print("‚ÑπÔ∏è Kh√¥ng c√≥ thay ƒë·ªïi n√†o c·∫ßn ƒë·ªìng b·ªô.")
            
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·ªìng b·ªô d·ªØ li·ªáu: {str(e)}")
        import traceback
        traceback.print_exc()
        raise
